AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
    Stage:
        Type: String
    Tenant:
        Type: String
    Microservice:
        Type: String
    ApiBasePath:
        Type: String
    ListenerArn:
        Type: String
    AuthorizerResultTtlInSeconds:
        Type: Number
        Default: 3600
        MinValue: 1
        MaxValue: 3600
    LogLevel:
        Type: String
        AllowedValues:
          - error
          - warn
          - log
          - info
          - verbose
          - debug
Conditions:
    isProd: !Equals [!Ref Stage, prod]

Globals:
    Function:
        Timeout: 900
        Runtime: nodejs20.x
        Environment:
            Variables:
                STAGE: !Ref Stage
                TENANT: !Ref Tenant
                REGION: !Ref AWS::Region
                ACCOUNT_NUMBER: !Ref AWS::AccountId
                MICROSERVICE: !Ref Microservice
                COGNITO_USER_POOL: {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-user-pool-id"}
                COGNITO_CLIENT_ID: {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-user-pool-client"}

Resources:
    # -----------------------------------------------
    # API GATEWAY
    # -----------------------------------------------
    Integration:
        Type: AWS::ApiGatewayV2::Integration
        Properties:
            ApiId: !Ref Api
            IntegrationType: HTTP_PROXY
            IntegrationMethod: ANY
            IntegrationUri: !Ref ListenerArn
            ConnectionType: VPC_LINK
            ConnectionId: {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-vpc-link-id"}
            PayloadFormatVersion: "1.0"
            RequestParameters:
                append:header.microservice: !Ref Microservice
                append:header.requestId: $context.requestId
                overwrite:path: '$request.path'
                append:header.stage: !Ref Stage
                append:header.tenant: !Ref Tenant

    CreateProductRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref Api
            RouteKey: POST /
            Target: !Sub integrations/${Integration}
            AuthorizationType: CUSTOM
            AuthorizerId: !Ref Authorizer

    EditProductRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref Api
            RouteKey: PUT /{product_id}
            Target: !Sub integrations/${Integration}
            AuthorizationType: CUSTOM
            AuthorizerId: !Ref Authorizer

    AddImageRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref Api
            RouteKey: POST /{product_id}/image
            Target: !Sub integrations/${Integration}
            AuthorizationType: CUSTOM
            AuthorizerId: !Ref Authorizer

    RemoveImageRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref Api
            RouteKey: DELETE /{product_id}/image/{image_id}
            Target: !Sub integrations/${Integration}
            AuthorizationType: CUSTOM
            AuthorizerId: !Ref Authorizer

    ListProductsRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref Api
            RouteKey: GET /
            Target: !Sub integrations/${Integration}
            AuthorizationType: NONE

    GetProductRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref Api
            RouteKey: GET /{product_id}
            Target: !Sub integrations/${Integration}
            AuthorizationType: NONE

    RouteOptions:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref Api
            RouteKey: OPTIONS /{proxy+}
            Target: !Sub integrations/${Integration}
            AuthorizationType: NONE

    Api:
        Type: AWS::ApiGatewayV2::Api
        Properties:
            Name: !Sub ${Stage}-${Tenant}-${Microservice}-api
            Description: !Sub ${Stage}-${Tenant}-${Microservice} Api
            ProtocolType: HTTP
            DisableExecuteApiEndpoint: true
            CorsConfiguration:
                AllowCredentials: false
                AllowHeaders:
                  - '*'
                AllowMethods:
                  - '*'
                AllowOrigins:
                  - '*'
                ExposeHeaders:
                  - '*'
                MaxAge: 0
            Tags:
                Service: ApiGatewayV2
                Resource: Api
                Name: !Sub ${Stage}-${Tenant}-${Microservice}-api
                StackName: !Ref AWS::StackName
                StackId: !Ref AWS::StackId
                Region: !Ref AWS::Region
                Microservice: !Ref Microservice
                Stage: !Ref Stage
                Tenant: !Ref Tenant

    ApiMapping:
        Type: AWS::ApiGatewayV2::ApiMapping
        Properties:
            ApiId: !Ref Api
            ApiMappingKey: !Ref ApiBasePath
            DomainName: {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-api-gateway-domain-name"}
            Stage: !Ref ApiStage

    ApiStage:
        Type: AWS::ApiGatewayV2::Stage
        Properties:
            ApiId: !Ref Api
            StageName: !Ref Stage
            AutoDeploy: true
            AccessLogSettings:
                DestinationArn: !GetAtt LogGroup.Arn
                Format: '$context.identity.sourceIp - - [$context.requestTime] "$context.httpMethod $context.routeKey $context.protocol" $context.status $context.responseLength $context.requestId | $context.integrationStatus $context.integrationErrorMessage'
            Tags:
                Service: ApiGatewayV2
                Resource: Stage
                Name: !Ref Stage
                StackName: !Ref AWS::StackName
                StackId: !Ref AWS::StackId
                Region: !Ref AWS::Region
                Microservice: !Ref Microservice
                Stage: !Ref Stage
                Tenant: !Ref Tenant

    Authorizer:
        Type: AWS::ApiGatewayV2::Authorizer
        Properties:
            Name: LambdaAuthorizer
            ApiId: !Ref Api
            AuthorizerType: REQUEST
            AuthorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaAuthorizer}/invocations
            AuthorizerPayloadFormatVersion: '1.0'
            AuthorizerResultTtlInSeconds: !Ref AuthorizerResultTtlInSeconds
            IdentitySource:
              - $request.header.Authorization
              - $context.routeKey
              - $request.path
        
    LambdaPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Ref LambdaAuthorizer
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/authorizers/${Authorizer}

    LogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            RetentionInDays: !If
              - isProd
              - !Ref AWS::NoValue
              - 7
            LogGroupName: !Sub /aws/api/${Stage}-${Tenant}-${Microservice}
            Tags:
              - Key: Service
                Value: CloudWatch
              - Key: Resource
                Value: LogGroup
              - Key: Name
                Value: !Sub /aws/api/${Stage}-${Tenant}-${Microservice}
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    # -----------------------------------------
    # APP MESH
    # -----------------------------------------
    CloudMapService:
        Type: AWS::ServiceDiscovery::Service
        Properties:
            Name: !Ref Microservice
            NamespaceId: {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-cloud-map-namespace-id"}
            DnsConfig:
                DnsRecords:
                  - Type: A
                    TTL: 60
                RoutingPolicy: MULTIVALUE

    VirtualNode:
        Type: AWS::AppMesh::VirtualNode
        Properties:
            MeshName:
                Fn::ImportValue: !Sub ${Stage}-${Tenant}-app-mesh-name
            VirtualNodeName: !Ref Microservice
            Spec:
                Listeners:
                  - PortMapping:
                        Port: 80
                        Protocol: http
                ServiceDiscovery:
                    AWSCloudMap:
                        NamespaceName: {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-cloud-map-namespace-name"}
                        ServiceName: !Ref Microservice
            Tags:
              - Key: Service
                Value: AppMesh
              - Key: Resource
                Value: VirtualNode
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-app-mesh-name
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant

    # ---------------------------------------------
    # LOAD BALANCER
    # ---------------------------------------------
    ListenerRule:
      Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
      Properties:
        ListenerArn: {"Fn::ImportValue": !Sub "${Stage}-${Tenant}-application-load-balancer-listener-arn"}
        Priority: 100
        Actions:
          - Type: forward
            TargetGroupArn: !Ref TargetGroup
        Conditions:
          - Field: http-header
            HttpHeaderConfig:
              HttpHeaderName: microservice
              Values:
                - !Ref Microservice

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            Name: !Sub ${Stage}-${Tenant}-${Microservice}
            HealthCheckPath: "/health-check"
            Port: 80
            Protocol: HTTP
            TargetType: ip
            UnhealthyThresholdCount: 10
            HealthCheckIntervalSeconds: 300
            VpcId: {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-vpc-id"}
            Tags:
              - Key: Service
                Value: ElasticLoadBalancingV2
              - Key: Resource
                Value: TargetGroup
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant


    LambdaAuthorizer:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${Stage}-${Tenant}-${Microservice}-authorizer
            Role: !GetAtt LambdaRole.Arn
            CodeUri: ./../
            Handler: dist/handlers/authorizer.authorizer
            VpcConfig:
                SubnetIds: !Split [',', {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-private-subnets-list"}]
                SecurityGroupIds:
                  - {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-private-subnet-security-group-id"}
            Tags:
                Service: Serverless
                Resource: Function
                Name: !Sub ${Stage}-${Tenant}-${Microservice}-authorizer
                StackName: !Ref AWS::StackName
                StackId: !Ref AWS::StackId
                Region: !Ref AWS::Region
                Microservice: !Ref Microservice
                Stage: !Ref Stage
                Tenant: !Ref Tenant
            Environment:
                Variables:
                    LOG_LEVEL: !Ref LogLevel
                    COGNITO_USER_POOL: {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-user-pool-id"}
                    COGNITO_CLIENT_ID: {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-user-pool-client"}
            Tracing: PassThrough

    LambdaLogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub /aws/lambda/${LambdaAuthorizer}
            RetentionInDays: !If
              - isProd
              - !Ref AWS::NoValue
              - 1
            Tags:
              - Key: Service
                Value: CloudWatch
              - Key: Resource
                Value: LogGroup
              - Key: Name
                Value: !Sub /aws/lambda/${LambdaAuthorizer}
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice

    LambdaRole:
        Type: "AWS::IAM::Role"
        Properties:
            RoleName: !Sub ${AWS::StackName}-lambda-role
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal:
                        Service:
                          - "lambda.amazonaws.com"
                          - "events.amazonaws.com"
                    Action:
                      - "sts:AssumeRole"
            Path: "/"
            ManagedPolicyArns:
              - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
              - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
              - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
            Policies:
              - PolicyName: !Sub ${Stage}-${Tenant}-${Microservice}
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Effect: "Allow"
                        Action:
                          - lambda:PublishVersion
                          - lambda:InvokeFunction
                          - apigateway:*
                          - cognito-idp:AdminGetUser
                        Resource: "*"
            Tags:
              - Key: Service
                Value: IAM
              - Key: Resource
                Value: Role
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-lambda-role
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice
  
Outputs:
    ApiGatewayApiId:
        Description: API Gateway Api Id
        Value: !Ref Api
        Export:
            Name: !Sub ${Stage}-${Tenant}-${Microservice}-api-id

    ApiGatewayApiStage:
        Description: API Gateway Api Stage
        Value: !Ref ApiStage
        Export:
            Name: !Sub ${Stage}-${Tenant}-${Microservice}-api-stage

    TargetGroupArn:
        Description: Target Group Arn
        Value: !GetAtt TargetGroup.TargetGroupArn
        Export:
            Name: !Sub ${Stage}-${Tenant}-${Microservice}-target-group-arn

    CloudMapServiceArn:
        Description: CloudMap Service Arn
        Value: !GetAtt CloudMapService.Arn
        Export:
            Name: !Sub ${Stage}-${Tenant}-${Microservice}-cloud-map-service-arn